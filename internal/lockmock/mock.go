// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KennyChenFight/Shortening-URL/pkg/lock (interfaces: Locker)

// Package lockmock is a generated GoMock package.
package lockmock

import (
	reflect "reflect"
	time "time"

	business "github.com/KennyChenFight/Shortening-URL/pkg/business"
	gomock "github.com/golang/mock/gomock"
)

// MockLocker is a mock of Locker interface.
type MockLocker struct {
	ctrl     *gomock.Controller
	recorder *MockLockerMockRecorder
}

// MockLockerMockRecorder is the mock recorder for MockLocker.
type MockLockerMockRecorder struct {
	mock *MockLocker
}

// NewMockLocker creates a new mock instance.
func NewMockLocker(ctrl *gomock.Controller) *MockLocker {
	mock := &MockLocker{ctrl: ctrl}
	mock.recorder = &MockLockerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLocker) EXPECT() *MockLockerMockRecorder {
	return m.recorder
}

// AcquireLock mocks base method.
func (m *MockLocker) AcquireLock(arg0 string, arg1, arg2 time.Duration) (bool, *business.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcquireLock", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*business.Error)
	return ret0, ret1
}

// AcquireLock indicates an expected call of AcquireLock.
func (mr *MockLockerMockRecorder) AcquireLock(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcquireLock", reflect.TypeOf((*MockLocker)(nil).AcquireLock), arg0, arg1, arg2)
}

// ReleaseLock mocks base method.
func (m *MockLocker) ReleaseLock(arg0 string) *business.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseLock", arg0)
	ret0, _ := ret[0].(*business.Error)
	return ret0
}

// ReleaseLock indicates an expected call of ReleaseLock.
func (mr *MockLockerMockRecorder) ReleaseLock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseLock", reflect.TypeOf((*MockLocker)(nil).ReleaseLock), arg0)
}
