// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KennyChenFight/Shortening-URL/pkg/job (interfaces: Job)

// Package jobmock is a generated GoMock package.
package jobmock

import (
	reflect "reflect"

	business "github.com/KennyChenFight/Shortening-URL/pkg/business"
	gomock "github.com/golang/mock/gomock"
)

// MockJob is a mock of Job interface.
type MockJob struct {
	ctrl     *gomock.Controller
	recorder *MockJobMockRecorder
}

// MockJobMockRecorder is the mock recorder for MockJob.
type MockJobMockRecorder struct {
	mock *MockJob
}

// NewMockJob creates a new mock instance.
func NewMockJob(ctrl *gomock.Controller) *MockJob {
	mock := &MockJob{ctrl: ctrl}
	mock.recorder = &MockJobMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJob) EXPECT() *MockJobMockRecorder {
	return m.recorder
}

// Name mocks base method.
func (m *MockJob) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockJobMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockJob)(nil).Name))
}

// TimerFormat mocks base method.
func (m *MockJob) TimerFormat() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TimerFormat")
	ret0, _ := ret[0].(string)
	return ret0
}

// TimerFormat indicates an expected call of TimerFormat.
func (mr *MockJobMockRecorder) TimerFormat() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TimerFormat", reflect.TypeOf((*MockJob)(nil).TimerFormat))
}

// Work mocks base method.
func (m *MockJob) Work() (map[string]interface{}, *business.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Work")
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(*business.Error)
	return ret0, ret1
}

// Work indicates an expected call of Work.
func (mr *MockJobMockRecorder) Work() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Work", reflect.TypeOf((*MockJob)(nil).Work))
}
